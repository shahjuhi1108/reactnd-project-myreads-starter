{"version":3,"sources":["BooksAPI.js","Constants.js","Book.js","BookShelf.js","SearchWindow.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","shelfAlias","move","currentlyReading","wantToRead","read","none","Book","handleChange","event","preventDefault","_this","props","handleShelfTypeChange","target","value","options","authors","Array","isArray","this","map","author","push","react_default","a","createElement","key","className","keys","Constants","forEach","shelfType","disabled","style","width","height","backgroundImage","undefined","imageLinks","thumbnail","onChange","title","Component","defaultProps","BookShelf","bookDetails","filter","ignoreShelf","src_Book","SearchWindow","state","searchedBooksState","searchBarChangeHandle","BooksAPI","searchedBooks","newBookArray","foundBook","findBookInArray","setState","prevState","react_router_dom","to","refresh","type","placeholder","src_BookShelf","BooksApp","findBook","bookToSearch","find","handleAddNewBook","bookToAdd","response","newShelf","newBookDetails","assign","excludeThisBook","_this2","_this3","react_router","exact","path","render","src_SearchWindow","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a778bb80.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","export const shelfAlias = {\n  \"move\" : \"Move to...\",\n  \"currentlyReading\" : \"Currently Reading\",\n  \"wantToRead\" : \"Want To Read\",\n  \"read\" : \"Read\",\n  \"none\" : \"None\"\n}\n","import React,  { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as Constants from './Constants'\n\nclass Book extends Component {\n  handleChange = (event) => {\n    event.preventDefault();\n    this.props.handleShelfTypeChange(this.props.book, event.target.value)\n  }\n\n  render() {\n\n    const options = [];\n    const authors = [];\n\n    if(Array.isArray(this.props.book.authors))  {\n      this.props.book.authors.map((author) => (\n        authors.push(<div key={author} className=\"book-author\">{author}</div>)\n      ))}\n\n\n    Object.keys(Constants.shelfAlias).forEach((shelfType) => {\n      if(shelfType === \"move\") {\n        options.push(<option key={shelfType} value={shelfType} disabled>{Constants.shelfAlias[shelfType]}</option>)\n      }else{\n        options.push(<option key={shelfType} value={shelfType}>{Constants.shelfAlias[shelfType]}</option>)\n      }\n    })\n\n    return(\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: 'url(' + (this.props.book.imageLinks === undefined ? \"\" : this.props.book.imageLinks.thumbnail) + ')' }}></div>\n          <div className=\"book-shelf-changer\">\n            <select value={this.props.book.shelf ? this.props.book.shelf : this.props.shelfType} onChange={this.handleChange}>\n              {options}\n            </select>\n          </div>\n        </div>\n        <div className=\"book-title\">{this.props.book.title}</div>\n        <div className=\"book-authors\">\n          {authors}\n        </div>\n      </div>\n    );\n  }\n}\n\nBook.defaultProps = {\n  shelfType: \"none\"\n}\n\nBook.propTypes = {\n  shelfType: PropTypes.string,\n  book: PropTypes.object.isRequired,\n  handleShelfTypeChange: PropTypes.func.isRequired,\n}\n\nexport default Book;\n","import React, { Component } from 'react'\nimport Book from './Book'\nimport PropTypes from 'prop-types'\nimport * as Constants from './Constants'\n\n\nclass BookShelf extends Component {\n  render() {\n\n\n    return(\n      <div className=\"list-books-content\">\n        <div>\n          <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{Constants.shelfAlias[this.props.shelfType]}</h2>\n            <div className=\"bookshelf-books\">\n              <ol className=\"books-grid\">\n              {this.props.bookDetails.filter((book) => {\n                  return (this.props.shelfType === book.shelf || this.props.ignoreShelf)\n                }).map((book) => (\n                  <li key={book.id}>\n                  <Book handleShelfTypeChange={this.props.handleShelfTypeChange} shelfType={this.props.shelfType} book={book}/>\n                  </li>\n              ))}\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nBookShelf.defaultProps = {\n  ignoreShelf: false\n}\n\nBookShelf.propTypes = {\n  shelfType: PropTypes.string,\n  bookDetails: PropTypes.array.isRequired,\n  handleShelfTypeChange: PropTypes.func,\n}\n\nexport default BookShelf;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as BooksAPI from './BooksAPI'\nimport BookShelf from './BookShelf'\nimport { Link } from 'react-router-dom'\n\n\nclass SearchWindow extends Component {\n  state = {\n    searchedBooksState:[],\n  }\n\n  searchBarChangeHandle = (event) => {\n    event.preventDefault();\n    BooksAPI.search(event.target.value)\n    .then((searchedBooks) => {\n      if(Array.isArray(searchedBooks)) {\n        const newBookArray = []\n        searchedBooks.forEach((book) => {\n          const foundBook = this.props.findBookInArray(book)\n          if(foundBook){\n            newBookArray.push(foundBook)\n          }\n          else{\n            newBookArray.push(book)\n          }\n        })\n        this.setState((prevState) => ({\n          searchedBooksState: newBookArray,\n        }))\n      }\n      else{\n        this.setState((prevState) => ({\n          searchedBooksState: [],\n        }))\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n        <Link\n          className='close-search'\n          to = '/'\n          refresh='true'>\n          Close\n        </Link>\n          <div className=\"search-books-input-wrapper\">\n            {/*\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\n              You can find these search terms here:\n              https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n              you don't find a specific author or title. Every search is limited by search terms.\n            */}\n            <input type=\"text\" placeholder=\"Search by title or author\" onChange={this.searchBarChangeHandle}/>\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            <BookShelf ignoreShelf={true} bookDetails={this.state.searchedBooksState} handleShelfTypeChange={this.props.handleShelfTypeChange}/>\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nSearchWindow.propTypes = {\n  handleShelfTypeChange: PropTypes.func.isRequired,\n  findBookInArray: PropTypes.func.isRequired,\n}\n\nexport default SearchWindow\n","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport BookShelf from './BookShelf'\nimport SearchWindow from './SearchWindow'\nimport { Route } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\n\nclass BooksApp extends React.Component {\n  state = {\n    bookDetails: [],\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n     shelfType: [\n       \"currentlyReading\",\n       \"wantToRead\",\n       \"read\",\n     ],\n  }\n\n  componentDidMount() {\n      BooksAPI.getAll()\n        .then((bookDetails) => {\n          this.setState(() => ({\n            bookDetails\n          }))\n        })\n    }\n\n    findBook = (bookToSearch) => (\n       this.state.bookDetails.find((book) => book.id === bookToSearch.id)\n    )\n\n    handleAddNewBook = (bookToAdd, shelf) => {\n      if (this.findBook(bookToAdd)) {\n        this.handleShelfTypeChange(bookToAdd, shelf)\n      }\n      else{\n        BooksAPI.update(bookToAdd, shelf)\n        .then((response) => {\n          bookToAdd.shelf = shelf\n          this.setState((prevState) => ({\n            bookDetails: prevState.bookDetails.concat([bookToAdd])\n          }))\n        })\n      }\n    }\n\n\n  handleShelfTypeChange = (book, newShelf) => {\n    BooksAPI.update(book, newShelf)\n    .then((response) => {\n      const newBookDetails = [];\n      const newState = Object.assign({}, this.state);\n      newState.bookDetails.forEach((excludeThisBook) => {\n        if(excludeThisBook.id !== book.id) {\n          newBookDetails.push(excludeThisBook)\n        }\n        else{\n          excludeThisBook.shelf = newShelf\n          newBookDetails.push(excludeThisBook)\n        }\n      })\n      this.setState((prevState) => ({\n        bookDetails: newBookDetails\n      }))\n    })\n  }\n\n  render() {\n        return (\n          <div className=\"app\">\n\n              <Route exact path='/search' render={() => (\n                  <SearchWindow findBookInArray={this.findBook} handleShelfTypeChange={(book, newShelf) => {\n                      this.handleAddNewBook(book, newShelf)\n                    }}\n                    />\n                )}\n              />\n\n            <Route exact path='/' render={() => (\n                  <div className=\"list-books\">\n                    <div className=\"list-books-title\">\n                      <h1>MyReads</h1>\n                    </div>\n                    {this.state.shelfType.map((shelf) => (\n                      <BookShelf key={shelf} shelfType={shelf} bookDetails={this.state.bookDetails} handleShelfTypeChange={this.handleShelfTypeChange}/>\n                    ))}\n                      <Link\n                        to='/search'\n                        className=\"open-search\"\n                        >Add a Book</Link>\n                  </div>\n                )}\n              />\n\n          </div>\n        )\n      }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n  <App />\n  </BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}